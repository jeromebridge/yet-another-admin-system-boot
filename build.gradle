import org.apache.tools.ant.taskdefs.condition.Os

apply plugin: 'eclipse'
apply plugin: 'groovy'

ext {
    virgoVersion = "3.6.3.RELEASE"
    springVersion = "3.2.11.RELEASE"
    aspectjVersion = "1.7.1"
}

configurations {
    virgo
    spring
    aspectj
}

repositories {
    mavenLocal()
    mavenCentral()
    maven { url "http://repo.pennassurancesoftware.com/repository/public/" }
}

dependencies {
    compile 'org.codehaus.groovy:groovy-all:2.3.6'
    virgo "org.eclipse.virgo:virgo-tomcat-server:${virgoVersion}"
    
    spring "org.apache.servicemix.bundles:org.apache.servicemix.bundles.spring-aop:${springVersion}_3"
    spring "org.apache.servicemix.bundles:org.apache.servicemix.bundles.spring-aspects:${springVersion}_2"
    spring "org.apache.servicemix.bundles:org.apache.servicemix.bundles.spring-beans:${springVersion}_2"
    spring "org.apache.servicemix.bundles:org.apache.servicemix.bundles.spring-context:${springVersion}_2"
    spring "org.apache.servicemix.bundles:org.apache.servicemix.bundles.spring-context-support:${springVersion}_2"
    spring "org.apache.servicemix.bundles:org.apache.servicemix.bundles.spring-core:${springVersion}_2"
    spring "org.apache.servicemix.bundles:org.apache.servicemix.bundles.spring-expression:${springVersion}_2"
    spring "org.apache.servicemix.bundles:org.apache.servicemix.bundles.spring-jdbc:${springVersion}_2"
    spring "org.apache.servicemix.bundles:org.apache.servicemix.bundles.spring-jms:${springVersion}_2"
    spring "org.apache.servicemix.bundles:org.apache.servicemix.bundles.spring-orm:${springVersion}_2"
    spring "org.apache.servicemix.bundles:org.apache.servicemix.bundles.spring-oxm:${springVersion}_2"
    spring "org.apache.servicemix.bundles:org.apache.servicemix.bundles.spring-tx:${springVersion}_3"
    spring "org.apache.servicemix.bundles:org.apache.servicemix.bundles.spring-web:${springVersion}_2"
    spring "org.apache.servicemix.bundles:org.apache.servicemix.bundles.spring-webmvc:${springVersion}_2"
    spring "org.apache.servicemix.bundles:org.apache.servicemix.bundles.spring-webmvc-portlet:${springVersion}_2"
    
    aspectj "org.aspectj:com.springsource.org.aspectj.weaver:${aspectjVersion}.RELEASE"
    
}

task setupVirgo( dependsOn: [ 'downloadVirgo', 'downloadSpring', 'downloadAspectJ', 'updateKernelRegionSshSettings', 'updateUserRegionSshSettings', 'updateFrameworkProperties', 'copyExtConfiguration' ] ) {}

task runVirgo(type:Exec) {
    def executableName = Os.isFamily( Os.FAMILY_WINDOWS ) ? "startup.bat" : "startup.sh"
    commandLine "${buildDir}/staging/virgo/virgo-tomcat-server-${virgoVersion}/bin/" + executableName, "-debug", "-clean", "-Djava.protocol.handler.pkgs=org.ops4j.pax.url"
}

task downloadVirgo << {
    delete new File( "${buildDir}/staging/virgo" )
    configurations.virgo.resolvedConfiguration.resolvedArtifacts.each {
        artifact -> 
           project.copy { 
               into new File( "${buildDir}/staging/virgo" ) 
               from( zipTree(artifact.file) ) 
           }
    }
}

task downloadSpring << {
    delete new File( "${buildDir}/staging/spring-upgrade" )
    configurations.spring.resolvedConfiguration.resolvedArtifacts.each {
        artifact -> 
           project.copy { 
               into new File( "${buildDir}/staging/spring-upgrade" ) 
               from( artifact.file ) 
           }
    }
}

task downloadAspectJ << {
    delete new File( "${buildDir}/staging/aspectj-upgrade" )
    configurations.aspectj.resolvedConfiguration.resolvedArtifacts.each {
        artifact -> 
           project.copy {
               into new File( "${buildDir}/staging/aspectj-upgrade" ) 
               from( artifact.file ) 
           }
    }
}

task updateKernelRegionSshSettings(type: UpdatePropertiesTask ) {
    source = "${projectDir}/src/main/config/kernel.osgi.console.properties"
    target = "${buildDir}/staging/virgo/virgo-tomcat-server-${virgoVersion}/configuration/osgi.console.properties"
    shouldRunAfter downloadVirgo
}

task updateUserRegionSshSettings(type: UpdatePropertiesTask) {
    source = "${projectDir}/src/main/config/user.osgi.console.properties"
    target = "${buildDir}/staging/virgo/virgo-tomcat-server-${virgoVersion}/repository/ext/osgi.console.properties"
    shouldRunAfter downloadVirgo
}

task updateFrameworkProperties(type: UpdatePropertiesTask) {
    source = "${projectDir}/src/main/config/config.ini"
    target = "${buildDir}/staging/virgo/virgo-tomcat-server-${virgoVersion}/configuration/config.ini"
    shouldRunAfter downloadVirgo
}

task copyExtConfiguration << { // (type: Copy) {
    // 
    
}

task upgradeSpringAndAspectJ(type: UpdateSpringAndAspectJTask, dependsOn: [ 'downloadSpring', 'downloadAspectJ' ]) {
    virgoHomeFolderPath = "${buildDir}/staging/virgo/virgo-tomcat-server-${virgoVersion}"
    springUpgradeFolderPath = "${buildDir}/staging/spring-upgrade"
    aspectjUpgradeFolderPath = "${buildDir}/staging/aspectj-upgrade"
    springUpgradeConfFolderPath = "${projectDir}/src/main/upgrade/spring"
    shouldRunAfter downloadVirgo
}

buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
    }
        
    dependencies {
        classpath 'commons-configuration:commons-configuration:1.10'
        classpath 'commons-lang:commons-lang:2.6'
        classpath 'commons-io:commons-io:2.4'
    }
}

import org.gradle.api.DefaultTask
import org.gradle.api.tasks.TaskAction
import org.apache.commons.configuration.Configuration;
import org.apache.commons.configuration.PropertiesConfiguration;
import org.apache.commons.lang.Validate;
import java.util.Iterator;

class UpdatePropertiesTask extends DefaultTask {
    String target;
    String source;

    @TaskAction
    def update() {
        Validate.notNull( target, "Must specify the property: target" );
        Validate.notNull( source, "Must specify the property: source" );
        PropertiesConfiguration src = new PropertiesConfiguration( source );
        PropertiesConfiguration trgt = new PropertiesConfiguration( target );
        Iterator keyIterator = src.getKeys();
		while( keyIterator.hasNext() ) {
		    String key = keyIterator.next();
		    Object value = src.getProperty( key );
		    trgt.setProperty( key, value ); 
		}
		trgt.save();
    }
}

import org.apache.commons.configuration.Configuration;
import org.apache.commons.configuration.PropertiesConfiguration;
import org.apache.commons.lang.Validate;
import org.apache.commons.io.FileUtils;
import java.util.Iterator;
import java.io.File;
import java.util.regex.Pattern;
import java.nio.file.Paths;
import java.nio.file.Path;
import java.nio.file.Files;
import java.nio.charset.Charset;
import java.nio.charset.StandardCharsets;

class UpdateSpringAndAspectJTask extends DefaultTask {
    String virgoHomeFolderPath;
	String springUpgradeFolderPath;
	String aspectjUpgradeFolderPath;
	String springUpgradeConfFolderPath;
	
	def getAspectjVersion() {
	   String result = null;
	   File aspectjUpgradeFolder = new File( aspectjUpgradeFolderPath );
	   File[] children = aspectjUpgradeFolder.listFiles();
        if( children != null ) {
            for( File child : children ) {
                String startExpression = "aspectj.weaver-";
                String endExpression = ".jar";
                String fileName = child.getName();
                if( fileName.indexOf( startExpression ) >= 0 && fileName.indexOf( endExpression ) >= 0 ) {
                    result = fileName.substring( fileName.indexOf( startExpression ) + startExpression.length(), fileName.indexOf( endExpression ) )
                    break;
                }
            }
       }
	   return result;
	}
    
    @TaskAction
    def update() {
        Validate.notNull( virgoHomeFolderPath, "Must specify the property: virgoHomeFolderPath" );
		Validate.notNull( springUpgradeFolderPath, "Must specify the property: springUpgradeFolderPath" );
		Validate.notNull( aspectjUpgradeFolderPath, "Must specify the property: aspectjUpgradeFolderPath" );
		Validate.notNull( springUpgradeConfFolderPath, "Must specify the property: springUpgradeConfFolderPath" );
		Validate.notNull( getAspectjVersion(), "Could not determine the version of AspectJ" );
		
		File virgoHomeFolder = new File( virgoHomeFolderPath );
		File springUpgradeFolder = new File( springUpgradeFolderPath );
		File aspectjUpgradeFolder = new File( aspectjUpgradeFolderPath );
		File springUpgradeConfFolder = new File( springUpgradeConfFolderPath );
		
		Validate.isTrue( virgoHomeFolder.exists(), String.format( "Virgo Home Folder: %s does not exist", virgoHomeFolderPath ) );
		Validate.isTrue( springUpgradeFolder.exists(), String.format( "Spring Upgrade Folder: %s does not exist", springUpgradeFolderPath ) );
		Validate.isTrue( aspectjUpgradeFolder.exists(), String.format( "AspectJ Upgrade Folder: %s does not exist", aspectjUpgradeFolderPath ) );
		Validate.isTrue( springUpgradeConfFolder.exists(), String.format( "Spring Upgrade Conf Folder: %s does not exist", springUpgradeConfFolderPath ) );
		
		String repositoryExtFolderPath = virgoHomeFolder.getAbsolutePath() + File.separator + "repository" + File.separator + "ext";
		File repositoryExtFolder = new File( repositoryExtFolderPath );
		Validate.isTrue( repositoryExtFolder.exists(), String.format( "Repository Ext Folder: %s does not exist", repositoryExtFolderPath ) );
		
		String pluginsFolderPath = virgoHomeFolder.getAbsolutePath() + File.separator + "plugins";
		File pluginsFolder = new File( pluginsFolderPath );
		Validate.isTrue( pluginsFolder.exists(), String.format( "Plugins Folder: %s does not exist", pluginsFolderPath ) );
		
		// Remove Existing Spring
		String oldSpringExpression = "org\\.springframework.*3.1.0.RELEASE.*";
		File[] children = repositoryExtFolder.listFiles();
		if (children != null) {
		    for( File child : children ) {
		        if( Pattern.matches( oldSpringExpression, child.getName() ) ) {
		            child.delete();
		        }
		    }
		}
		
		// Add New Spring
		File[] upgradeSpringFiles = springUpgradeFolder.listFiles();
		if( upgradeSpringFiles != null ) {
		    for( File upgradeSpringFile : upgradeSpringFiles ) {
		        FileUtils.copyFileToDirectory( upgradeSpringFile, repositoryExtFolder );
		    }
		}
		File[] upgradeSpringConfFiles = springUpgradeConfFolder.listFiles();
		if( upgradeSpringConfFiles != null ) {
		    for( File upgradeSpringConfFile : upgradeSpringConfFiles ) {
		        FileUtils.copyFileToDirectory( upgradeSpringConfFile, repositoryExtFolder );
		    }
		}
		
		// Remove Existing AspectJ
		String oldAspectJExpression = ".*aspectj.weaver.*";
		File[] children2 = repositoryExtFolder.listFiles();
		if( children2 != null ) {
		    for( File child : children2 ) {
		        if( Pattern.matches( oldAspectJExpression, child.getName() ) ) {
		            child.delete();
		        }
		    }
		}
		File[] children3 = pluginsFolder.listFiles();
		if( children3 != null ) {
		    for( File child : children3 ) {
		        if( Pattern.matches( oldAspectJExpression, child.getName() ) ) {
		            child.delete();
		        }
		    }
		}
		
		// Add New AspectJ
		File[] upgradeAspectjFiles = aspectjUpgradeFolder.listFiles();
		if( upgradeAspectjFiles != null ) {
		    for( File upgradeAspectJ : upgradeAspectjFiles ) {
		        FileUtils.copyFileToDirectory( upgradeAspectJ, repositoryExtFolder );
		        FileUtils.copyFileToDirectory( upgradeAspectJ, pluginsFolder );
		    }
		}
		Path path = Paths.get( virgoHomeFolder.getAbsolutePath() + File.separator + "configuration" + File.separator + "org.eclipse.virgo.kernel.userregion.properties" );
		Charset charset = StandardCharsets.UTF_8;
		String content = new String(Files.readAllBytes(path), charset);
		String oldLine = "org.aspectj.*;version=\"[1.6.5.RELEASE,2.0.0)\"";
		String newLine = "org.aspectj.*;version=\"[" + getAspectjVersion() + ",2.0.0)\"";
		content = content.replace( oldLine, newLine );
		Files.write(path, content.getBytes(charset));
		
		Path path2 = Paths.get( virgoHomeFolder.getAbsolutePath() + File.separator + "configuration" + File.separator + "org.eclipse.equinox.simpleconfigurator" + File.separator + "bundles.info" );
		String content2 = new String(Files.readAllBytes(path2), charset);
		String oldLine2 = "com.springsource.org.aspectj.weaver,1.6.12.RELEASE,plugins/com.springsource.org.aspectj.weaver_1.6.12.RELEASE.jar,4,false";
		String newLine2 = "com.springsource.org.aspectj.weaver," + getAspectjVersion() + ",plugins/com.springsource.org.aspectj.weaver-" + getAspectjVersion() + ".jar,4,false";
		content2 = content2.replace( oldLine2, newLine2 );
		Files.write(path2, content2.getBytes(charset));
    }
}