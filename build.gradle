import org.apache.tools.ant.taskdefs.condition.Os
import org.apache.tools.ant.filters.ReplaceTokens

apply plugin: 'eclipse'
apply plugin: 'java'
apply plugin: UpdatePropertiesPlugin

ext {
    virgoArtifactId = "virgo-jetty-server"
    virgoVersion = "3.6.3.RELEASE"
    springVersion = "3.2.11.RELEASE"
    aspectjVersion = "1.7.1"
    ops4jVersion = "1.5.0"
    paxUrlVersion = "2.2.0"
    paxSwissboxVersion = "1.8.0"
    paxWebVersion = "4.1.1"
    
    jpaVersion = "2.1.0"
    eclipselinkVersion = "2.5.2"
    cdiVersion = "1.2"
    commonsIoVersion = "2.4"
    commonsLang3Version = "3.1"
    xmlbeansVersion = "2.4.0"
    junitVersion = "4.11.0"
    postgresqlJdbc4Version = "8.3.604"
    jaxbVersion = "2.2.10"
    liquibaseVersion = "3.2.0"
    restletVersion = "2.2.3"
    poiVersion = "3.11"
    h2Version = "1.4.186"
    jettyVersion = "9.2.11.M0"
    jettyUpgradeVersion = "8.1.3.v20120416"

    yaasVersion = "1.0.0.M1"

}

configurations {
    compile {
        transitive = false
    }
    virgo
    spring
    aspectj
    pax {
        transitive = false
    }
    pax_web {
        transitive = false
    }
    felix_web_console {
        transitive = false
    }
    jetty_httpservice
    eclipse_jdt {
        transitive = false
    }
    jetty {
        transitive = false
    }
    jetty_upgrade {
        transitive = false
    }
    yaas { 
        transitive = false
        resolutionStrategy {
	        cacheDynamicVersionsFor 0, "seconds"
	        cacheChangingModulesFor 0, "seconds"
	    }
    }
    osgi_tools_dep {
        transitive = false
    }
    osgi_tools {
        transitive = false
        resolutionStrategy {
            cacheDynamicVersionsFor 0, "seconds"
            cacheChangingModulesFor 0, "seconds"
        }
    }
    pickup {
        transitive = false
    }
}

repositories {
    mavenCentral()
    maven { url "http://repo.pennassurancesoftware.com/artifactory/public/" }
    maven { url "http://repo.pennassurancesoftware.com/artifactory/public-snapshots/" }
    mavenLocal()
}

dependencies {
    compile "javax.persistence:com.springsource.javax.persistence:2.0.0"
    compile "org.apache.velocity:com.springsource.org.apache.velocity.tools.view:1.4.0"
    compile "org.dom4j:com.springsource.org.dom4j:1.6.1"
    // compile "org.glassfish.web:javax.el:2.2.1"
    compile "javax.el:javax.el-api:2.2.1"
    // compile "javax.faces:javax.faces-api:2.1"
    compile "org.glassfish:javax.faces:2.1.2"
    compile "javax.inject:javax.inject:1"
    compile "javax.interceptor:javax.interceptor-api:1.2"
    compile "javax.transaction:javax.transaction-api:1.2"
    compile "javax.ws.rs:jsr311-api:1.1.1"
    compile "org.apache.servicemix.bundles:org.apache.servicemix.bundles.cglib:3.1_1"
    compile "org.apache.servicemix.bundles:org.apache.servicemix.bundles.commons-beanutils:1.8.3_2"
    compile "org.apache.servicemix.bundles:org.apache.servicemix.bundles.commons-collections:3.2.1_3"
    compile "org.apache.servicemix.bundles:org.apache.servicemix.bundles.commons-dbcp:1.4_3"
    compile "org.apache.servicemix.bundles:org.apache.servicemix.bundles.commons-digester:1.8_4"
    compile "org.apache.servicemix.bundles:org.apache.servicemix.bundles.commons-jxpath:1.3_1"
    // compile "org.apache.servicemix.bundles:org.apache.servicemix.bundles.commons-lang:2.4_6"
    compile "org.apache.servicemix.bundles:org.apache.servicemix.bundles.commons-pool:1.5.4_4"
    compile "org.apache.servicemix.bundles:org.apache.servicemix.bundles.guava:11.0.2_2"
    compile "org.apache.servicemix.bundles:org.apache.servicemix.bundles.jaxb-impl:2.2.10_1"
    compile "org.apache.servicemix.bundles:org.apache.servicemix.bundles.oro:2.0.8_6"
    compile "org.apache.servicemix.bundles:org.apache.servicemix.bundles.reflections:0.9.8_1"
    compile "org.apache.servicemix.bundles:org.apache.servicemix.bundles.velocity:1.7_3"
    compile "com.pennassurancesoftware.bundles:org.apache.poi-osgi:${poiVersion}"
    compile "org.eclipse.persistence:javax.persistence:${jpaVersion}"
    compile "org.eclipse.persistence:org.eclipse.persistence.core:${eclipselinkVersion}"
    compile "org.eclipse.persistence:org.eclipse.persistence.jpa:${eclipselinkVersion}"
    compile "org.eclipse.persistence:org.eclipse.persistence.jpa.jpql:${eclipselinkVersion}"
    compile "org.eclipse.persistence:org.eclipse.persistence.asm:${eclipselinkVersion}"
    compile "org.eclipse.persistence:org.eclipse.persistence.antlr:${eclipselinkVersion}"
    compile "org.eclipse.persistence:org.eclipse.persistence.moxy:${eclipselinkVersion}"
    // compile "org.eclipse.virgo.mirrored:org.glassfish.com.sun.faces:2.1.18.v201304210537:virgo"
    // compile "org.restlet.osgi:org.restlet:${restletVersion}"
    // compile "org.restlet.osgi:org.restlet.ext.servlet:${restletVersion}"
    // compile "org.restlet.osgi:org.restlet.ext.xml:${restletVersion}"
    // compile "org.restlet.osgi:org.restlet.ext.jaxrs:${restletVersion}"
    // compile "org.restlet.osgi:org.restlet.ext.osgi:${restletVersion}"
    // compile "org.restlet.osgi:org.restlet.ext.jaxb:${restletVersion}"
    compile "org.testng:testng:6.5.2"
    compile "com.atomikos:transactions-osgi:3.9.3"
    compile "javax.enterprise:cdi-api:${cdiVersion}"
    compile "commons-io:commons-io:${commonsIoVersion}"
    compile "org.apache.commons:commons-lang3:${commonsLang3Version}"
    compile "org.apache.xmlbeans:com.springsource.org.apache.xmlbeans:${xmlbeansVersion}"
    compile "org.junit:com.springsource.org.junit:${junitVersion}"
    compile "org.postgresql:com.springsource.org.postgresql.jdbc4:${postgresqlJdbc4Version}"
    compile "javax.xml.bind:jaxb-api:${jaxbVersion}"
    compile "org.liquibase:liquibase-osgi:${liquibaseVersion}"
    compile "commons-codec:commons-codec:1.5"
    
    compile "org.json:com.springsource.org.json:1.0.0"
    compile "org.apache.ant:com.springsource.org.apache.tools.ant:1.7.0"
    compile "org.jaxen:com.springsource.org.jaxen:1.1.1"
    compile "org.relaxng:com.springsource.org.relaxng.datatype:1.0.0"
    compile "org.javassist:javassist:3.17.1-GA"
    compile "commons-lang:commons-lang:2.6"
    // compile "org.ops4j.pax.logging:pax-logging-api:1.8.2"
    // compile "org.ops4j.pax.logging:pax-logging-service:1.8.2"
    // compile "org.ops4j.pax.logging:pax-logging-logback:1.8.2"
    
    compile "org.slf4j:slf4j-api:1.7.2"
    compile "org.slf4j:slf4j-log4j12:1.7.2"
    
    pickup "com.h2database:h2:${h2Version}"
    
    
    yaas "com.pennassurancesoftware.org.springframework:spring-aspects-osgi:3.2.11.RELEASE-SNAPSHOT"
    yaas "com.yaas.module:yaas-annotations:${yaasVersion}"
    yaas "com.yaas.module:yaas-beans:${yaasVersion}"
    yaas "com.yaas.module:yaas-business-ul:${yaasVersion}"
    yaas "com.yaas.module:yaas-commons:${yaasVersion}"
    yaas "com.yaas.module:yaas-config:${yaasVersion}"
    yaas "com.yaas.module:yaas-config-ul:${yaasVersion}"
    yaas "com.yaas.module:yaas-core:${yaasVersion}"
    yaas "com.yaas.module:yaas-db:${yaasVersion}"
    yaas "com.yaas.module:yaas-dictionary-api:${yaasVersion}"
    yaas "com.yaas.module:yaas-dictionary-ul-api:${yaasVersion}"
    yaas "com.yaas.module:yaas-environment:${yaasVersion}"
    yaas "com.yaas.module:yaas-exception:${yaasVersion}"
    yaas "com.yaas.module:yaas-lifecycle-api:${yaasVersion}"
    yaas "com.yaas.module:yaas-policy:${yaasVersion}"
    yaas "com.yaas.module:yaas-policy-api:${yaasVersion}"
    yaas "com.yaas.module:yaas-policy-ul:${yaasVersion}"
    yaas "com.yaas.module:yaas-policy-ul-api:${yaasVersion}"
    yaas "com.yaas.module:yaas-rate-api:${yaasVersion}"
    yaas "com.yaas.module:yaas-rate:${yaasVersion}"
    yaas "com.yaas.module:yaas-test:${yaasVersion}"
    yaas "com.yaas.module:yaas-test-case-ul:${yaasVersion}"
    yaas "com.yaas.module:yaas-xml:${yaasVersion}"
    
    yaas "com.yaas.web:yaas-web:${yaasVersion}"
    yaas "com.yaas.web:yaas-ws:${yaasVersion}"
    // yaas "com.yaas.web:yaas-ws-client:${yaasVersion}"
    
    virgo "org.eclipse.virgo:${virgoArtifactId}:${virgoVersion}"
    
    spring "org.apache.servicemix.bundles:org.apache.servicemix.bundles.spring-aop:${springVersion}_3"
    spring "org.apache.servicemix.bundles:org.apache.servicemix.bundles.spring-aspects:${springVersion}_2"
    spring "org.apache.servicemix.bundles:org.apache.servicemix.bundles.spring-beans:${springVersion}_2"
    spring "org.apache.servicemix.bundles:org.apache.servicemix.bundles.spring-context:${springVersion}_2"
    spring "org.apache.servicemix.bundles:org.apache.servicemix.bundles.spring-context-support:${springVersion}_2"
    spring "org.apache.servicemix.bundles:org.apache.servicemix.bundles.spring-core:${springVersion}_2"
    spring "org.apache.servicemix.bundles:org.apache.servicemix.bundles.spring-expression:${springVersion}_2"
    spring "org.apache.servicemix.bundles:org.apache.servicemix.bundles.spring-jdbc:${springVersion}_2"
    spring "org.apache.servicemix.bundles:org.apache.servicemix.bundles.spring-jms:${springVersion}_2"
    spring "org.apache.servicemix.bundles:org.apache.servicemix.bundles.spring-orm:${springVersion}_2"
    spring "org.apache.servicemix.bundles:org.apache.servicemix.bundles.spring-oxm:${springVersion}_2"
    spring "org.apache.servicemix.bundles:org.apache.servicemix.bundles.spring-tx:${springVersion}_3"
    spring "org.apache.servicemix.bundles:org.apache.servicemix.bundles.spring-web:${springVersion}_2"
    spring "org.apache.servicemix.bundles:org.apache.servicemix.bundles.spring-webmvc:${springVersion}_2"
    spring "org.apache.servicemix.bundles:org.apache.servicemix.bundles.spring-webmvc-portlet:${springVersion}_2"
    
    pax "org.ops4j.base:ops4j-base-lang:${ops4jVersion}"
    pax "org.ops4j.base:ops4j-base-monitors:${ops4jVersion}"
    pax "org.ops4j.base:ops4j-base-io:${ops4jVersion}"
    pax "org.codehaus.jackson:jackson-core-asl:1.9.13"
    pax "org.ops4j.pax.swissbox:pax-swissbox-core:${paxSwissboxVersion}"
    pax "org.ops4j.base:ops4j-base-util-property:${ops4jVersion}"
    pax "org.ops4j.pax.swissbox:pax-swissbox-property:${paxSwissboxVersion}"
    pax "org.ops4j.pax.swissbox:pax-swissbox-lifecycle:${paxSwissboxVersion}"
    pax "org.ops4j.pax.swissbox:pax-swissbox-tracker:${paxSwissboxVersion}"
    pax "org.ops4j.pax.url:pax-url-commons:${paxUrlVersion}"
    pax "org.ops4j.pax.url:pax-url-assembly:${paxUrlVersion}"
    pax "org.ops4j.pax.url:pax-url-aether:${paxUrlVersion}"
    pax "org.ops4j.base:ops4j-base-net:${ops4jVersion}"
    pax "org.apache.felix:org.osgi.service.obr:1.0.2"
    pax "org.apache.felix:org.apache.felix.bundlerepository:2.0.2"
    pax "org.ops4j.pax.url:pax-url-obr:${paxUrlVersion}"
    
    pax_web "org.ops4j.pax.web:pax-web-api:${paxWebVersion}"
    pax_web "org.ops4j.pax.web:pax-web-spi:${paxWebVersion}"
    pax_web "org.ops4j.pax.web:pax-web-runtime:${paxWebVersion}"
    
    pax_web "org.apache.xbean:xbean-finder:4.2"
    pax_web "org.ops4j.pax.web:pax-web-jetty:${paxWebVersion}"
    
    pax_web "org.ops4j.pax.web:pax-web-jsp:${paxWebVersion}"
    pax_web "org.ops4j.pax.web:pax-web-extender-war:${paxWebVersion}"
    pax_web "org.ops4j.pax.web:pax-web-extender-whiteboard:${paxWebVersion}"
    
    
    jetty_httpservice "org.eclipse.equinox:org.eclipse.equinox.http.servlet:1.1.400.v20130418"
    jetty_httpservice "org.eclipse.jetty.osgi:jetty-httpservice:${jettyVersion}"
    
    // jetty "javax.servlet:javax.servlet-api:3.0.1"
    // jetty "org.eclipse.jetty.toolchain:jetty-osgi-servlet-api:3.1.0.M3"
    // jetty "org.eclipse.equinox:org.eclipse.equinox.http.servlet:1.1.400.v20130418"
    
    // Eclipse JDT needed for JSP support in Jetty
    eclipse_jdt "org.eclipse.equinox:org.eclipse.equinox.preferences:3.4.1"
    eclipse_jdt "org.eclipse.core:org.eclipse.core.jobs:3.5.100"
    eclipse_jdt "org.eclipse.equinox:org.eclipse.equinox.registry:3.5.101"
    eclipse_jdt "org.eclipse.core:org.eclipse.core.contenttype:3.4.100"
    eclipse_jdt "org.eclipse.equinox:org.eclipse.equinox.app:1.3.100"
    eclipse_jdt "org.eclipse.core:org.eclipse.core.runtime:3.7.0"
    eclipse_jdt "org.eclipse.core:org.eclipse.core.expressions:3.4.300"
    eclipse_jdt "org.eclipse.core:org.eclipse.core.filesystem:1.3.100"
    eclipse_jdt "org.eclipse.core:org.eclipse.core.resources:3.7.100"
    eclipse_jdt "org.eclipse.core:org.eclipse.core.commands:3.6.0"
    eclipse_jdt "org.eclipse.birt.runtime:com.ibm.icu:52.1.1.v201501240615"
    eclipse_jdt "org.eclipse.text:org.eclipse.text:3.5.101"
    eclipse_jdt "org.eclipse.jdt:org.eclipse.jdt.core:3.10.0"
    
    jetty "org.ow2.asm:asm:5.0.1"
    jetty "org.ow2.asm:asm-commons:5.0.1"
    jetty "org.ow2.asm:asm-tree:5.0.1"
    jetty "org.apache.aries:org.apache.aries.util:1.1.0"
    jetty "org.apache.aries.spifly:org.apache.aries.spifly.dynamic.bundle:1.0.2"
    jetty "javax.annotation:javax.annotation-api:1.2"
    
    
    jetty "org.eclipse.jetty:jetty-annotations:${jettyVersion}"
    jetty "org.eclipse.jetty:jetty-client:${jettyVersion}"
    jetty "org.eclipse.jetty:jetty-cdi:${jettyVersion}"
    jetty "org.eclipse.jetty:jetty-continuation:${jettyVersion}"
    jetty "org.eclipse.jetty:jetty-deploy:${jettyVersion}"
    jetty "org.eclipse.jetty:jetty-http:${jettyVersion}"
    jetty "org.eclipse.jetty:jetty-io:${jettyVersion}"
    jetty "org.eclipse.jetty:jetty-jmx:${jettyVersion}"
    jetty "org.eclipse.jetty:jetty-jndi:${jettyVersion}"
    jetty "org.eclipse.jetty:jetty-plus:${jettyVersion}"
    jetty "org.eclipse.jetty:jetty-rewrite:${jettyVersion}"
    jetty "org.eclipse.jetty:jetty-security:${jettyVersion}"
    jetty "org.eclipse.jetty:jetty-server:${jettyVersion}"
    jetty "org.eclipse.jetty:jetty-servlet:${jettyVersion}"
    jetty "org.eclipse.jetty:jetty-servlets:${jettyVersion}"
    jetty "org.eclipse.jetty:jetty-util:${jettyVersion}"
    jetty "org.eclipse.jetty:jetty-webapp:${jettyVersion}"
    jetty "org.eclipse.jetty:jetty-xml:${jettyVersion}"
    jetty "org.eclipse.jetty.toolchain:jetty-osgi-servlet-api:3.1.0.M3"
    
    
    jetty "org.eclipse.jetty.osgi:jetty-httpservice:${jettyVersion}"
    jetty "org.eclipse.jetty.osgi:jetty-osgi-boot:${jettyVersion}"
    jetty "org.eclipse.jetty.osgi:jetty-osgi-boot-jsp:${jettyVersion}"
    
    jetty "org.eclipse.jetty.websocket:websocket-servlet:9.3.0.M2"
    
    
    jetty "org.ops4j.pax.web:pax-web-api:${paxWebVersion}"
    jetty "org.ops4j.pax.web:pax-web-spi:${paxWebVersion}"
    jetty "org.ops4j.pax.web:pax-web-runtime:${paxWebVersion}"
    
    jetty "org.apache.xbean:xbean-bundleutils:4.2"
    jetty "org.apache.xbean:xbean-finder:4.2"
    
    jetty "org.ops4j.pax.web:pax-web-jetty:${paxWebVersion}"
    
    
    
    // Jetty JSP Support
    jetty "javax.servlet.jsp:javax.servlet.jsp-api:2.3.2-b01"
    jetty "javax.servlet.jsp.jstl:javax.servlet.jsp.jstl-api:1.2.1"
    jetty "org.apache.xml:com.springsource.org.apache.xml.resolver:1.2.0"
    jetty "org.apache.servicemix.bundles:org.apache.servicemix.bundles.xerces:2.11.0_1"
    jetty "org.apache.servicemix.bundles:org.apache.servicemix.bundles.bcel:5.2_4"
    jetty "org.apache.servicemix.bundles:org.apache.servicemix.bundles.xalan:2.7.2_2"
    jetty "org.apache.taglibs:taglibs-standard-impl:1.2.5"
    jetty "org.apache.taglibs:taglibs-standard-jstlel:1.2.5"
    jetty "com.github.akiraly.reusable-poms:tomcat-juli-over-slf4j:4"
    jetty "org.ops4j.pax.web:pax-web-jsp:${paxWebVersion}"
    
    
    jetty "org.ops4j.pax.web:pax-web-extender-war:${paxWebVersion}"
    jetty "org.ops4j.pax.web:pax-web-extender-whiteboard:${paxWebVersion}"
    
    // jetty "org.ops4j.pax.web:pax-web-jetty-bundle:${paxWebVersion}"
    
    
    jetty "commons-fileupload:commons-fileupload:1.3.1"
    jetty "org.everit.osgi.bundles:org.everit.osgi.bundles.javax.servlet.api:3.1.0" // Servlet API 2.7


    jetty_upgrade "org.everit.osgi.bundles:org.everit.osgi.bundles.javax.servlet.api:3.1.0" // Servlet API 2.7 & 3.1
    jetty_upgrade "org.eclipse.equinox:org.eclipse.equinox.http.servlet:1.1.400.v20130418"
    jetty_upgrade "org.eclipse.jetty.osgi:jetty-httpservice:${jettyUpgradeVersion}"

    aspectj "org.aspectj:com.springsource.org.aspectj.weaver:${aspectjVersion}.RELEASE"
    
    osgi_tools_dep "org.apache.commons:commons-lang3:${commonsLang3Version}"
    osgi_tools_dep "com.springsource.util:com.springsource.util.parser.manifest:2.0.5.RELEASE"
    osgi_tools_dep "org.eclipse.aether:aether-util:0.9.0.M2"
    osgi_tools_dep "org.eclipse.sisu:org.eclipse.sisu.inject:0.1.1"
    osgi_tools_dep "org.sonatype.sisu:sisu-guice:3.1.6"
    osgi_tools_dep "org.apache.felix:org.apache.felix.shell:1.4.1"
    osgi_tools_dep "org.apache.httpcomponents:httpclient-osgi:4.2.6"
    osgi_tools_dep "org.apache.httpcomponents:httpcore-osgi:4.2.5"
    osgi_tools_dep "com.google.guava:guava:12.0"
    osgi_tools_dep "org.sonatype.sisu:sisu-inject-bean:2.3.0"
    osgi_tools_dep "javax.enterprise:cdi-api:1.2"
    osgi_tools_dep "org.sonatype.sisu:sisu-guava:0.9.9"
    // osgi_tools_dep "org.slf4j:slf4j-api:1.7.5"
    osgi_tools_dep "com.springsource.util:com.springsource.util.osgi:2.0.5.RELEASE"
    osgi_tools_dep "org.eclipse.aether:aether-api:0.9.0.M2"
    // osgi_tools_dep "org.slf4j:jcl-over-slf4j:1.6.2"
    osgi_tools_dep "com.springsource.util:com.springsource.util.common:2.0.5.RELEASE"
    // osgi_tools_dep "ch.qos.logback:logback-core:1.0.7"
    // osgi_tools_dep "ch.qos.logback:logback-classic:1.0.7"
    osgi_tools_dep  "commons-codec:commons-codec:1.10"
    
    osgi_tools "tools.osgi:osgi.analyzer:1.00.001-SNAPSHOT"
    osgi_tools "tools.osgi:osgi.maven.integration:1.00.001-SNAPSHOT"
}

task setupVirgoQuick( dependsOn: [ 'downloadVirgo', 'downloadSpring', 'downloadAspectJ', 'upgradeSpringAndAspectJ', 'updateVirgoSettings', 'removeVirgoSplash' ] ) {}

task setupVirgoNoYaas( dependsOn: [ 'downloadVirgo', 'downloadSpring', 'downloadAspectJ', 'installPaxUrl', 'installOsgiTools', 'upgradeJetty2', 'upgradeSpringAndAspectJ', 'installUserRegionBundles', 'updateVirgoSettings', 'removeVirgoSplash', 'installPickupBundles', 'installYaasDep' ] ) {}

task setupVirgo( dependsOn: [ 'setupVirgoNoYaas', 'installYaas' ] ) {}

task runVirgo(type:Exec) {
    def executableName = Os.isFamily( Os.FAMILY_WINDOWS ) ? "startup.bat" : "startup.sh"
    commandLine "${buildDir}/staging/virgo/${virgoArtifactId}-${virgoVersion}/bin/" + executableName, "-debug", "-clean", "-Djava.protocol.handler.pkgs=org.ops4j.pax.url"
}

task downloadVirgo << {
    delete new File( "${buildDir}/staging/virgo" )
    configurations.virgo.resolvedConfiguration.resolvedArtifacts.each {
        artifact -> 
           project.copy { 
               into new File( "${buildDir}/staging/virgo" ) 
               from( zipTree(artifact.file) ) 
           }
    }
}

task downloadSpring << {
    delete new File( "${buildDir}/staging/spring-upgrade" )
    configurations.spring.resolvedConfiguration.resolvedArtifacts.each {
        artifact -> 
           project.copy { 
               into new File( "${buildDir}/staging/spring-upgrade" ) 
               from( artifact.file ) 
           }
    }
}

task downloadAspectJ << {
    delete new File( "${buildDir}/staging/aspectj-upgrade" )
    configurations.aspectj.resolvedConfiguration.resolvedArtifacts.each {
        artifact -> 
           project.copy {
               into new File( "${buildDir}/staging/aspectj-upgrade" ) 
               from( artifact.file ) 
           }
    }
}

task installPaxUrl(dependsOn: [ 'downloadVirgo' ]) << {
    configurations.pax.resolvedConfiguration.resolvedArtifacts.each {
        artifact -> 
           project.copy {
               into new File( "${buildDir}/staging/virgo/${virgoArtifactId}-${virgoVersion}/repository/ext" ) 
               from( artifact.file )
           }
    }
    copy {
        from "${projectDir}/src/main/config/ext"
        into "${buildDir}/staging/virgo/${virgoArtifactId}-${virgoVersion}/repository/ext"
    }
    copy {
        from "${projectDir}/src/main/plans/pax-url.plan"
        into "${buildDir}/staging/virgo/${virgoArtifactId}-${virgoVersion}/pickup"
    }
}

task installPaxWeb(dependsOn: [ 'downloadVirgo' ]) << {
    configurations.pax_web.resolvedConfiguration.resolvedArtifacts.each {
        artifact -> 
           project.copy {
               into new File( "${buildDir}/staging/virgo/${virgoArtifactId}-${virgoVersion}/repository/ext" ) 
               from( artifact.file )
           }
    }
    copy {
        from "${projectDir}/src/main/config/ext"
        into "${buildDir}/staging/virgo/${virgoArtifactId}-${virgoVersion}/repository/ext"
    }
    copy {
        from "${projectDir}/src/main/plans/pax-web.plan"
        into "${buildDir}/staging/virgo/${virgoArtifactId}-${virgoVersion}/pickup"
    }
}

task installOsgiTools(dependsOn: [ 'downloadVirgo' ]) << {
    copy {
        from "${projectDir}/src/main/plans/osgi-tools.plan"
        into "${buildDir}/staging/virgo/${virgoArtifactId}-${virgoVersion}/pickup"
    }
    
    configurations.osgi_tools_dep.resolvedConfiguration.resolvedArtifacts.each {
        artifact -> 
           project.copy {
               into new File( "${buildDir}/staging/virgo/${virgoArtifactId}-${virgoVersion}/repository/usr" ) 
               from( artifact.file )
           }
    }
    
    configurations.osgi_tools.resolvedConfiguration.resolvedArtifacts.each {
        artifact -> 
           project.copy {
               into new File( "${buildDir}/staging/virgo/${virgoArtifactId}-${virgoVersion}/repository/usr" ) 
               from( artifact.file )
           }
    }
}

task installHttpService(dependsOn: [ 'downloadVirgo', 'upgradeJetty' ]) << {
    if( isJettyVirgo() ) {
	    copy {
	        from "${projectDir}/src/main/plans/jetty-httpservice.plan"
	        into "${buildDir}/staging/virgo/${virgoArtifactId}-${virgoVersion}/pickup"
	    }
	    configurations.jetty_httpservice.resolvedConfiguration.resolvedArtifacts.each {
	        artifact -> 
	           project.copy {
	               into new File( "${buildDir}/staging/virgo/${virgoArtifactId}-${virgoVersion}/repository/ext" ) 
	               from( artifact.file )
	           }
	    }
	}
}

task installEclipseJtd(dependsOn: [ 'downloadVirgo' ]) << {
    // Copy Plugin Jars And Update bundles.info
    configurations.eclipse_jdt.resolvedConfiguration.resolvedArtifacts.each {
        artifact -> 
           project.copy {
               into new File( "${buildDir}/staging/virgo/${virgoArtifactId}-${virgoVersion}/plugins" ) 
               from( artifact.file )
           }
           addPluginToBundleList( artifact.file )
    }
    
}

task upgradeJetty2(dependsOn: [ 'downloadVirgo' ]) << {
    if( isJettyVirgo() ) {
        // Copy Jetty Upgrade Artifacts
        configurations.jetty_upgrade.resolvedConfiguration.resolvedArtifacts.each {
            artifact -> 
               project.copy {
                   into new File( "${buildDir}/staging/virgo/${virgoArtifactId}-${virgoVersion}/repository/ext" ) 
                   from( artifact.file )
               }
        }
        
        // Overwrite Jetty Web Plan
        copy {
            from "${projectDir}/src/main/upgrade/jetty/plans/org.eclipse.virgo.jetty.web-3.5.0.RELEASE.plan"
            into "${buildDir}/staging/virgo/${virgoArtifactId}-${virgoVersion}/repository/ext"
        }
    }
}

task upgradeJetty(dependsOn: [ 'downloadVirgo', 'installEclipseJtd' ]) << {
    if( isJettyVirgo() ) {
        // Remove Jetty Jars
        ant.delete( includeEmptyDirs: 'true' ) {
	        fileset(
	            dir: file( "${buildDir}/staging/virgo/${virgoArtifactId}-${virgoVersion}/repository/ext" ), 
	            includes: "*jetty-*.jar"
	        )
	    }
	    
	    // Remove Servlet API Jars
	    ant.delete( includeEmptyDirs: 'true' ) {
            fileset(
                dir: file( "${buildDir}/staging/virgo/${virgoArtifactId}-${virgoVersion}/repository/ext" ), 
                includes: "*javax.servlet*.jar"
            )
        }
        ant.delete( includeEmptyDirs: 'true' ) {
            fileset(
                dir: file( "${buildDir}/staging/virgo/${virgoArtifactId}-${virgoVersion}/repository/ext" ), 
                includes: "servlet*.jar"
            )
        }
        
        // Remove File Upload Jars
        ant.delete( includeEmptyDirs: 'true' ) {
	        fileset(
	            dir: file( "${buildDir}/staging/virgo/${virgoArtifactId}-${virgoVersion}/repository/ext" ), 
	            includes: "*com.springsource*fileupload*-*.jar"
	        )
	    }
        
        // Copy Pax Artifacts
        configurations.pax.resolvedConfiguration.resolvedArtifacts.each {
	        artifact -> 
	           project.copy {
	               into new File( "${buildDir}/staging/virgo/${virgoArtifactId}-${virgoVersion}/repository/ext" ) 
	               from( artifact.file )
	           }
	    }
	    
	    // Copy Jetty Artifacts
	    configurations.jetty.resolvedConfiguration.resolvedArtifacts.each {
	        artifact -> 
	           project.copy {
	               into new File( "${buildDir}/staging/virgo/${virgoArtifactId}-${virgoVersion}/repository/ext" ) 
	               from( artifact.file )
	           }
	    }
	    
	    // Overwrite Jetty Web Plan
	    copy {
            from "${projectDir}/src/main/plans/org.eclipse.virgo.jetty.web-3.5.0.RELEASE.plan"
            into "${buildDir}/staging/virgo/${virgoArtifactId}-${virgoVersion}/repository/ext"
        }
        
        // PAX Web Properties
        copy {
	        from "${projectDir}/src/main/config/ext/org.ops4j.pax.web.properties"
	        into "${buildDir}/staging/virgo/${virgoArtifactId}-${virgoVersion}/repository/ext"
	        filter(ReplaceTokens, tokens: [VIRGO_HOME: "${buildDir}/staging/virgo/${virgoArtifactId}-${virgoVersion}".toString()])
	    }
	    
	    // Setup Jetty Configuration
	    // addSystemProperty( "java.naming.factory.initial", "org.eclipse.jetty.jndi.InitialContextFactory" );
	    // addSystemProperty( "jetty.etc.config.urls", "etc/jetty.xml,etc/jetty-deploy.xml,etc/jetty-annotations.xml,etc/jetty-plus.xml,etc/jetty-http.xml" );
        copy {
            from "${projectDir}/src/main/config/jetty/etc"
            into "${buildDir}/staging/virgo/${virgoArtifactId}-${virgoVersion}/jetty/etc"
        }
    }
}

task installUserRegionBundles(dependsOn: [ 'downloadVirgo' ]) << {
    configurations.compile.resolvedConfiguration.resolvedArtifacts.each {
        artifact -> 
           project.copy {
               into new File( "${buildDir}/staging/virgo/${virgoArtifactId}-${virgoVersion}/repository/usr" ) 
               from( artifact.file )
           }
    }
}

task installPickupBundles(dependsOn: [ 'downloadVirgo' ]) << {
    configurations.pickup.resolvedConfiguration.resolvedArtifacts.each {
        artifact -> 
           project.copy {
               into new File( "${buildDir}/staging/virgo/${virgoArtifactId}-${virgoVersion}/pickup" ) 
               from( artifact.file )
           }
    }
}

task installYaas(dependsOn: [ 'downloadVirgo' ]) << {
    copy {
        from "${projectDir}/src/main/plans/yaas.plan"
        into "${buildDir}/staging/virgo/${virgoArtifactId}-${virgoVersion}/pickup"
    }
    configurations.yaas.resolvedConfiguration.resolvedArtifacts.each {
        artifact -> 
           project.copy {
               into new File( "${buildDir}/staging/virgo/${virgoArtifactId}-${virgoVersion}/repository/usr" ) 
               from( artifact.file ) 
           }
    }
    new File( "${buildDir}/staging/virgo/${virgoArtifactId}-${virgoVersion}/repository/usr/com.yaas.properties" ).withWriter { writer ->
      getYaasConfig().toProperties().store( writer, "Yet Another Admin System Properties" )
    }
    printConfig( getYaasConfig(), "Yaas Config" )
}

task installYaasDep(dependsOn: [ 'downloadVirgo' ]) << {
    copy {
        from "${projectDir}/src/main/plans/yaas-dep.plan"
        into "${buildDir}/staging/virgo/${virgoArtifactId}-${virgoVersion}/pickup"
    }
}

task updateVirgoSettings { shouldRunAfter downloadVirgo } << {
    updateProperties {
        source = "${projectDir}/src/main/config/kernel.osgi.console.properties"
        target = "${buildDir}/staging/virgo/${virgoArtifactId}-${virgoVersion}/configuration/osgi.console.properties"
    }
    updateProperties {
        source = "${projectDir}/src/main/config/user.osgi.console.properties"
        target = "${buildDir}/staging/virgo/${virgoArtifactId}-${virgoVersion}/repository/ext/osgi.console.properties"
    }
    updateProperties {
        source = "${projectDir}/src/main/config/config.ini"
        target = "${buildDir}/staging/virgo/${virgoArtifactId}-${virgoVersion}/configuration/config.ini"
    }
    // Hack to get Virgo to accept bundles that require Java 7 Execution Environment
    updateProperties {
        source = "${projectDir}/src/main/config/java6-server.profile"
        target = "${buildDir}/staging/virgo/${virgoArtifactId}-${virgoVersion}/configuration/java6-server.profile"
    }
}

task removeVirgoSplash { shouldRunAfter downloadVirgo } << {
    ant.delete( includeEmptyDirs: 'true' ) {
        fileset(
            dir: file( "${buildDir}/staging/virgo/${virgoArtifactId}-${virgoVersion}/pickup" ), 
            includes: "*splash*.jar"
        )
    }
}

task upgradeSpringAndAspectJ(type: UpdateSpringAndAspectJTask, dependsOn: [ 'downloadSpring', 'downloadAspectJ' ]) {
    virgoHomeFolderPath = "${buildDir}/staging/virgo/${virgoArtifactId}-${virgoVersion}"
    springUpgradeFolderPath = "${buildDir}/staging/spring-upgrade"
    aspectjUpgradeFolderPath = "${buildDir}/staging/aspectj-upgrade"
    springUpgradeConfFolderPath = "${projectDir}/src/main/upgrade/spring"
    shouldRunAfter downloadVirgo
}

task printProps << {
    println getYaasConfig().toProperties()
}

buildscript {
    repositories {
        // mavenLocal()
        mavenCentral()
        maven { url "http://repo.pennassurancesoftware.com/artifactory/public/" }
    }
        
    dependencies {
        classpath 'commons-configuration:commons-configuration:1.10'
        classpath 'commons-lang:commons-lang:2.6'
        classpath 'commons-io:commons-io:2.4'
        classpath 'com.springsource.util:com.springsource.util.parser.manifest:2.0.5.RELEASE'
        classpath 'com.springsource.util:com.springsource.util.common:2.0.5.RELEASE'
        classpath 'com.springsource.util:com.springsource.util.osgi:2.0.5.RELEASE'
        classpath 'org.osgi:org.osgi.core:4.3.1'
    }
}

import org.apache.commons.lang.Validate;
def addPluginToBundleList( file ) {
    // example: org.eclipse.equinox.preferences,3.4.1.R37x_v20110725,plugins/org.eclipse.equinox.preferences-3.4.1.jar,4,true
    final BundleManifest bundleManifest = getBundleManifest( file );
    Validate.notNull( bundleManifest, "No manifest could be found for jar file: ${file}" );
    final String symbolicName = bundleManifest.bundleSymbolicName.symbolicName;
    final String versionNumber = bundleManifest.bundleVersion.toString();
    final String location = "plugins/${file.name}"
    final String entry = "${symbolicName},${versionNumber},${location},4,true"
    new File( "${buildDir}/staging/virgo/${virgoArtifactId}-${virgoVersion}/configuration/org.eclipse.equinox.simpleconfigurator/bundles.info" )
        .withWriterAppend( "UTF-8" ) { it.write( entry ); it.write( System.lineSeparator() ) }
}

import java.util.jar.JarFile;
import java.util.zip.ZipEntry;
import com.springsource.util.common.CaseInsensitiveMap;
import com.springsource.util.osgi.manifest.BundleManifest;
import com.springsource.util.osgi.manifest.BundleManifestFactory;
import com.springsource.util.osgi.manifest.parse.DummyParserLogger;
def BundleManifest getBundleManifest( file ) {
     BundleManifest result = null;
     final JarFile jar = new JarFile( file );
     final ZipEntry manifestEntry = jar.getEntry( JarFile.MANIFEST_NAME );
     if( manifestEntry != null ) {
        final Reader reader = new InputStreamReader( jar.getInputStream( manifestEntry ) );
        result = BundleManifestFactory.createBundleManifest( reader, new DummyParserLogger() );
        jar.close();
     }
     return result;
}

def addSystemProperty( propName, propValue ) {
    
    // Windows
    insertBefore( 
        "${buildDir}/staging/virgo/${virgoArtifactId}-${virgoVersion}/bin/dmk.bat",
        "      set KERNEL_JAVA_PARMS=%KERNEL_JAVA_PARMS% -D${propName}=\"${propValue}\"", 
        { line -> line.contains( "KERNEL_JAVA_PARMS" ) && line.contains( "-D" ) } 
    );
    
    // Unix
    insertBefore( 
        "${buildDir}/staging/virgo/${virgoArtifactId}-${virgoVersion}/bin/dmk.sh",
        "            -D${propName}=\"${propValue}\" \\", 
        { line -> line.contains( "-Djava.security.auth" ) } 
    );
}

def insertBefore( filePath, txt, lineChk ) {
    Path path = Paths.get( filePath );
    Charset charset = StandardCharsets.UTF_8;
    String content = new String(Files.readAllBytes(path), charset);
    StringWriter stringWriter = new StringWriter();
    PrintWriter writer = new PrintWriter( stringWriter );
    Scanner scanner = new Scanner(content);
    boolean lineAddedFlag = false;
    while (scanner.hasNextLine()) {
        String line = scanner.nextLine();
        if( !lineAddedFlag ) {
            if( lineChk.call( line ) ) {
                lineAddedFlag=true;
                writer.println( txt );
            }
        }
        writer.println(line)
    }
    scanner.close();
    Files.write(path, stringWriter.toString().getBytes(charset));
}

def printConfig( config, title ) {
    println("")
    println("==========================================================")
    println("${title}")
    println("==========================================================")
    Collections.list( config.toProperties().propertyNames() ).each() { 
        def propVal = config.toProperties().getProperty( it );
        println( "${it}=${propVal}" )
    };
    println("----------------------------------------------------------")
    println("")
}

// Example of different environment: gradle -Penv=test setupVirgo
def getYaasConfig() { 
    def environment = hasProperty( 'env' ) ? env : 'dev'
    println "Environment is set to $environment"
    
    def configFile = file( 'src/main/config/yaas-config.groovy' )
    def raw = new ConfigSlurper( environment ).parse( configFile.toURL() )
    def rawProps = raw.toProperties()
    def resultProps = new Properties();
    Collections.list( rawProps.propertyNames() ).each() { 
        def propValue = getPropertyOverride( it, rawProps.getProperty( it ) )
        resultProps.setProperty( it, propValue )
    };
    def result = new ConfigSlurper().parse( resultProps )
    return result
}


def getPropertyOverride( key, value ) {
    def result = hasProperty( key ) ? getProperty( key ) : value
    return result
}

def isJettyVirgo() {
    return virgoArtifactId.contains( 'jetty' );
}


import org.gradle.api.DefaultTask
import org.gradle.api.tasks.TaskAction
import org.apache.commons.configuration.Configuration;
import org.apache.commons.configuration.PropertiesConfiguration;
import org.apache.commons.lang.Validate;
import java.util.Iterator;

class UpdatePropertiesTask extends DefaultTask {
    String target;
    String source;

    @TaskAction
    def update() {
        Validate.notNull( target, "Must specify the property: target" );
        Validate.notNull( source, "Must specify the property: source" );
        PropertiesConfiguration src = new PropertiesConfiguration( source );
        PropertiesConfiguration trgt = new PropertiesConfiguration( target );
        Iterator keyIterator = src.getKeys();
		while( keyIterator.hasNext() ) {
		    String key = keyIterator.next();
		    Object value = src.getProperty( key );
		    trgt.setProperty( key, value ); 
		}
		trgt.save();
    }
}

import org.apache.commons.configuration.Configuration;
import org.apache.commons.configuration.PropertiesConfiguration;
import org.apache.commons.lang.Validate;
import org.apache.commons.io.FileUtils;
import java.util.Iterator;
import java.io.File;
import java.util.regex.Pattern;
import java.nio.file.Paths;
import java.nio.file.Path;
import java.nio.file.Files;
import java.nio.charset.Charset;
import java.nio.charset.StandardCharsets;

class UpdateSpringAndAspectJTask extends DefaultTask {
    String virgoHomeFolderPath;
	String springUpgradeFolderPath;
	String aspectjUpgradeFolderPath;
	String springUpgradeConfFolderPath;
	
	def getAspectjVersion() {
	   String result = null;
	   File aspectjUpgradeFolder = new File( aspectjUpgradeFolderPath );
	   File[] children = aspectjUpgradeFolder.listFiles();
        if( children != null ) {
            for( File child : children ) {
                String startExpression = "aspectj.weaver-";
                String endExpression = ".jar";
                String fileName = child.getName();
                if( fileName.indexOf( startExpression ) >= 0 && fileName.indexOf( endExpression ) >= 0 ) {
                    result = fileName.substring( fileName.indexOf( startExpression ) + startExpression.length(), fileName.indexOf( endExpression ) )
                    break;
                }
            }
       }
	   return result;
	}
    
    @TaskAction
    def update() {
        Validate.notNull( virgoHomeFolderPath, "Must specify the property: virgoHomeFolderPath" );
		Validate.notNull( springUpgradeFolderPath, "Must specify the property: springUpgradeFolderPath" );
		Validate.notNull( aspectjUpgradeFolderPath, "Must specify the property: aspectjUpgradeFolderPath" );
		Validate.notNull( springUpgradeConfFolderPath, "Must specify the property: springUpgradeConfFolderPath" );
		Validate.notNull( getAspectjVersion(), "Could not determine the version of AspectJ" );
		
		File virgoHomeFolder = new File( virgoHomeFolderPath );
		File springUpgradeFolder = new File( springUpgradeFolderPath );
		File aspectjUpgradeFolder = new File( aspectjUpgradeFolderPath );
		File springUpgradeConfFolder = new File( springUpgradeConfFolderPath );
		
		Validate.isTrue( virgoHomeFolder.exists(), String.format( "Virgo Home Folder: %s does not exist", virgoHomeFolderPath ) );
		Validate.isTrue( springUpgradeFolder.exists(), String.format( "Spring Upgrade Folder: %s does not exist", springUpgradeFolderPath ) );
		Validate.isTrue( aspectjUpgradeFolder.exists(), String.format( "AspectJ Upgrade Folder: %s does not exist", aspectjUpgradeFolderPath ) );
		Validate.isTrue( springUpgradeConfFolder.exists(), String.format( "Spring Upgrade Conf Folder: %s does not exist", springUpgradeConfFolderPath ) );
		
		String repositoryExtFolderPath = virgoHomeFolder.getAbsolutePath() + File.separator + "repository" + File.separator + "ext";
		File repositoryExtFolder = new File( repositoryExtFolderPath );
		Validate.isTrue( repositoryExtFolder.exists(), String.format( "Repository Ext Folder: %s does not exist", repositoryExtFolderPath ) );
		
		String pluginsFolderPath = virgoHomeFolder.getAbsolutePath() + File.separator + "plugins";
		File pluginsFolder = new File( pluginsFolderPath );
		Validate.isTrue( pluginsFolder.exists(), String.format( "Plugins Folder: %s does not exist", pluginsFolderPath ) );
		
		// Remove Existing Spring
		String oldSpringExpression = "org\\.springframework.*3.1.0.RELEASE.*";
		File[] children = repositoryExtFolder.listFiles();
		if (children != null) {
		    for( File child : children ) {
		        if( Pattern.matches( oldSpringExpression, child.getName() ) ) {
		            child.delete();
		        }
		    }
		}
		
		// Add New Spring
		File[] upgradeSpringFiles = springUpgradeFolder.listFiles();
		if( upgradeSpringFiles != null ) {
		    for( File upgradeSpringFile : upgradeSpringFiles ) {
		        FileUtils.copyFileToDirectory( upgradeSpringFile, repositoryExtFolder );
		    }
		}
		File[] upgradeSpringConfFiles = springUpgradeConfFolder.listFiles();
		if( upgradeSpringConfFiles != null ) {
		    for( File upgradeSpringConfFile : upgradeSpringConfFiles ) {
		        FileUtils.copyFileToDirectory( upgradeSpringConfFile, repositoryExtFolder );
		    }
		}
		
		// Remove Existing AspectJ
		String oldAspectJExpression = ".*aspectj.weaver.*";
		File[] children2 = repositoryExtFolder.listFiles();
		if( children2 != null ) {
		    for( File child : children2 ) {
		        if( Pattern.matches( oldAspectJExpression, child.getName() ) ) {
		            child.delete();
		        }
		    }
		}
		File[] children3 = pluginsFolder.listFiles();
		if( children3 != null ) {
		    for( File child : children3 ) {
		        if( Pattern.matches( oldAspectJExpression, child.getName() ) ) {
		            child.delete();
		        }
		    }
		}
		
		// Add New AspectJ
		File[] upgradeAspectjFiles = aspectjUpgradeFolder.listFiles();
		if( upgradeAspectjFiles != null ) {
		    for( File upgradeAspectJ : upgradeAspectjFiles ) {
		        FileUtils.copyFileToDirectory( upgradeAspectJ, repositoryExtFolder );
		        FileUtils.copyFileToDirectory( upgradeAspectJ, pluginsFolder );
		    }
		}
		Path path = Paths.get( virgoHomeFolder.getAbsolutePath() + File.separator + "configuration" + File.separator + "org.eclipse.virgo.kernel.userregion.properties" );
		Charset charset = StandardCharsets.UTF_8;
		String content = new String(Files.readAllBytes(path), charset);
		String oldLine = "org.aspectj.*;version=\"[1.6.5.RELEASE,2.0.0)\"";
		String newLine = "org.aspectj.*;version=\"[" + getAspectjVersion() + ",2.0.0)\"";
		content = content.replace( oldLine, newLine );
		Files.write(path, content.getBytes(charset));
		
		Path path2 = Paths.get( virgoHomeFolder.getAbsolutePath() + File.separator + "configuration" + File.separator + "org.eclipse.equinox.simpleconfigurator" + File.separator + "bundles.info" );
		String content2 = new String(Files.readAllBytes(path2), charset);
		String oldLine2 = "com.springsource.org.aspectj.weaver,1.6.12.RELEASE,plugins/com.springsource.org.aspectj.weaver_1.6.12.RELEASE.jar,4,false";
		String newLine2 = "com.springsource.org.aspectj.weaver," + getAspectjVersion() + ",plugins/com.springsource.org.aspectj.weaver-" + getAspectjVersion() + ".jar,4,false";
		content2 = content2.replace( oldLine2, newLine2 );
		Files.write(path2, content2.getBytes(charset));
    }
}


class UpdatePropertiesPlugin implements Plugin<Project> {
    def void apply(Project project) {
        project.convention.plugins.updateProperties = new UpdatePropertiesPluginConvention()
    }
}

class UpdatePropertiesPluginConvention {
    String target;
    String source;

    def updateProperties(Closure closure) {
        closure.delegate = this
        closure()
        
        Validate.notNull( target, "Must specify the property: target" );
        Validate.notNull( source, "Must specify the property: source" );
        PropertiesConfiguration src = new PropertiesConfiguration( source );
        PropertiesConfiguration trgt = new PropertiesConfiguration( target );
        Iterator keyIterator = src.getKeys();
        while( keyIterator.hasNext() ) {
            String key = keyIterator.next();
            Object value = src.getProperty( key );
            trgt.setProperty( key, value ); 
        }
        trgt.save();
    }
}