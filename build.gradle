import org.apache.tools.ant.taskdefs.condition.Os

apply plugin: 'eclipse'
apply plugin: 'java'
apply plugin: UpdatePropertiesPlugin

ext {
    virgoVersion = "3.6.3.RELEASE"
    springVersion = "3.2.11.RELEASE"
    aspectjVersion = "1.7.1"
    ops4jVersion = "1.5.0"
    paxUrlVersion = "2.2.0"
    paxSwissboxVersion = "1.8.0"
    
    jpaVersion = "2.1.0"
    eclipselinkVersion = "2.5.2"
    cdiVersion = "1.2"
    commonsIoVersion = "2.4"
    commonsLang3Version = "3.1"
    xmlbeansVersion = "2.4.0"
    junitVersion = "4.11.0"
    postgresqlJdbc4Version = "8.3.604"
    jaxbVersion = "2.2.10"
    liquibaseVersion = "3.2.0"
    restletVersion = "2.2.3"

    yaasVersion = "1.0.0.M1"

}

configurations {
    virgo
    spring
    aspectj
    pax
    yaas { 
        transitive = false
        resolutionStrategy {
	        cacheDynamicVersionsFor 0, "seconds"
	        cacheChangingModulesFor 0, "seconds"
	    }
    }
}

repositories {
    mavenLocal()
    mavenCentral()
    maven { url "http://repo.pennassurancesoftware.com/repository/public/" }
    maven { url "http://repo.pennassurancesoftware.com/repository/public-snapshots/" }
}

dependencies {
    compile "javax.persistence:com.springsource.javax.persistence:2.0.0"
    compile "org.apache.velocity:com.springsource.org.apache.velocity.tools.view:1.4.0"
    compile "org.dom4j:com.springsource.org.dom4j:1.6.1"
    compile "org.glassfish:javax.faces:2.1.2"
    compile "javax.inject:javax.inject:1"
    compile "javax.interceptor:javax.interceptor-api:1.2"
    compile "javax.transaction:javax.transaction-api:1.2"
    compile "javax.ws.rs:jsr311-api:1.1.1"
    compile "org.apache.servicemix.bundles:org.apache.servicemix.bundles.cglib:3.1_1"
    compile "org.apache.servicemix.bundles:org.apache.servicemix.bundles.commons-beanutils:1.8.3_2"
    compile "org.apache.servicemix.bundles:org.apache.servicemix.bundles.commons-collections:3.2.1_3"
    compile "org.apache.servicemix.bundles:org.apache.servicemix.bundles.commons-dbcp:1.4_3"
    compile "org.apache.servicemix.bundles:org.apache.servicemix.bundles.commons-digester:1.8_4"
    compile "org.apache.servicemix.bundles:org.apache.servicemix.bundles.commons-jxpath:1.3_1"
    compile "org.apache.servicemix.bundles:org.apache.servicemix.bundles.commons-lang:2.4_6"
    compile "org.apache.servicemix.bundles:org.apache.servicemix.bundles.commons-pool:1.5.4_4"
    compile "org.apache.servicemix.bundles:org.apache.servicemix.bundles.guava:11.0.2_2"
    compile "org.apache.servicemix.bundles:org.apache.servicemix.bundles.jaxb-impl:2.2.10_1"
    compile "org.apache.servicemix.bundles:org.apache.servicemix.bundles.oro:2.0.8_6"
    compile "org.apache.servicemix.bundles:org.apache.servicemix.bundles.reflections:0.9.8_1"
    compile "org.apache.servicemix.bundles:org.apache.servicemix.bundles.velocity:1.7_3"
    compile "org.eclipse.persistence:javax.persistence:${jpaVersion}"
    compile "org.eclipse.persistence:org.eclipse.persistence.core:${eclipselinkVersion}"
    compile "org.eclipse.persistence:org.eclipse.persistence.jpa:${eclipselinkVersion}"
    compile "org.eclipse.persistence:org.eclipse.persistence.jpa.jpql:${eclipselinkVersion}"
    compile "org.eclipse.persistence:org.eclipse.persistence.asm:${eclipselinkVersion}"
    compile "org.eclipse.persistence:org.eclipse.persistence.antlr:${eclipselinkVersion}"
    compile "org.eclipse.persistence:org.eclipse.persistence.moxy:${eclipselinkVersion}"
    compile "org.eclipse.virgo.mirrored:org.glassfish.com.sun.faces:2.1.18.v201304210537-virgo"
    compile "org.restlet.osgi:org.restlet:${restletVersion}"
    compile "org.restlet.osgi:org.restlet.ext.servlet:${restletVersion}"
    compile "org.restlet.osgi:org.restlet.ext.xml:${restletVersion}"
    compile "org.restlet.osgi:org.restlet.ext.jaxrs:${restletVersion}"
    compile "org.restlet.osgi:org.restlet.ext.osgi:${restletVersion}"
    compile "org.restlet.osgi:org.restlet.ext.jaxb:${restletVersion}"
    compile "org.testng:testng:6.5.2"
    compile "com.atomikos:transactions-osgi:3.9.3"
    compile "javax.enterprise:cdi-api:${cdiVersion}"
    compile "commons-io:commons-io:${commonsIoVersion}"
    compile "org.apache.commons:commons-lang3:${commonsLang3Version}"
    compile "org.apache.xmlbeans:com.springsource.org.apache.xmlbeans:${xmlbeansVersion}"
    compile "org.junit:com.springsource.org.junit:${junitVersion}"
    compile "org.postgresql:com.springsource.org.postgresql.jdbc4:${postgresqlJdbc4Version}"
    compile "javax.xml.bind:jaxb-api:${jaxbVersion}"
    compile "org.liquibase:liquibase-osgi:${liquibaseVersion}"
    
    yaas "com.pennassurancesoftware.org.springframework:spring-aspects-osgi:3.2.11.RELEASE-SNAPSHOT"
    yaas "com.yaas.module:yaas-annotations:${yaasVersion}"
    yaas "com.yaas.module:yaas-beans:${yaasVersion}"
    yaas "com.yaas.module:yaas-business-ul:${yaasVersion}"
    yaas "com.yaas.module:yaas-commons:${yaasVersion}"
    yaas "com.yaas.module:yaas-config:${yaasVersion}"
    yaas "com.yaas.module:yaas-config-ul:${yaasVersion}"
    yaas "com.yaas.module:yaas-core:${yaasVersion}"
    yaas "com.yaas.module:yaas-db:${yaasVersion}"
    yaas "com.yaas.module:yaas-dto:${yaasVersion}"
    yaas "com.yaas.module:yaas-dto-ul:${yaasVersion}"
    yaas "com.yaas.module:yaas-exception:${yaasVersion}"
    yaas "com.yaas.module:yaas-policy:${yaasVersion}"
    yaas "com.yaas.module:yaas-policy-ul:${yaasVersion}"
    yaas "com.yaas.module:yaas-test:${yaasVersion}"
    yaas "com.yaas.module:yaas-test-case-ul:${yaasVersion}"
    yaas "com.yaas.module:yaas-xml:${yaasVersion}"
    yaas "com.yaas.web:yaas-web:${yaasVersion}"
    yaas "com.yaas.web:yaas-ws:${yaasVersion}"
    // yaas "com.yaas.web:yaas-ws-client:${yaasVersion}"
    
    
    virgo "org.eclipse.virgo:virgo-tomcat-server:${virgoVersion}"
    
    spring "org.apache.servicemix.bundles:org.apache.servicemix.bundles.spring-aop:${springVersion}_3"
    spring "org.apache.servicemix.bundles:org.apache.servicemix.bundles.spring-aspects:${springVersion}_2"
    spring "org.apache.servicemix.bundles:org.apache.servicemix.bundles.spring-beans:${springVersion}_2"
    spring "org.apache.servicemix.bundles:org.apache.servicemix.bundles.spring-context:${springVersion}_2"
    spring "org.apache.servicemix.bundles:org.apache.servicemix.bundles.spring-context-support:${springVersion}_2"
    spring "org.apache.servicemix.bundles:org.apache.servicemix.bundles.spring-core:${springVersion}_2"
    spring "org.apache.servicemix.bundles:org.apache.servicemix.bundles.spring-expression:${springVersion}_2"
    spring "org.apache.servicemix.bundles:org.apache.servicemix.bundles.spring-jdbc:${springVersion}_2"
    spring "org.apache.servicemix.bundles:org.apache.servicemix.bundles.spring-jms:${springVersion}_2"
    spring "org.apache.servicemix.bundles:org.apache.servicemix.bundles.spring-orm:${springVersion}_2"
    spring "org.apache.servicemix.bundles:org.apache.servicemix.bundles.spring-oxm:${springVersion}_2"
    spring "org.apache.servicemix.bundles:org.apache.servicemix.bundles.spring-tx:${springVersion}_3"
    spring "org.apache.servicemix.bundles:org.apache.servicemix.bundles.spring-web:${springVersion}_2"
    spring "org.apache.servicemix.bundles:org.apache.servicemix.bundles.spring-webmvc:${springVersion}_2"
    spring "org.apache.servicemix.bundles:org.apache.servicemix.bundles.spring-webmvc-portlet:${springVersion}_2"
    
    pax "org.ops4j.base:ops4j-base-lang:${ops4jVersion}"
    pax "org.ops4j.base:ops4j-base-monitors:$ops4jVersion}"
    pax "org.ops4j.base:ops4j-base-io:${ops4jVersion}"
    pax "org.codehaus.jackson:jackson-core-asl:1.9.13"
    pax "org.ops4j.pax.swissbox:pax-swissbox-core:${paxSwissboxVersion}"
    pax "org.ops4j.base:ops4j-base-util-property:${ops4jVersion}"
    pax "org.ops4j.pax.swissbox:pax-swissbox-property:${paxSwissboxVersion}"
    pax "org.ops4j.pax.swissbox:pax-swissbox-lifecycle:${paxSwissboxVersion}"
    pax "org.ops4j.pax.swissbox:pax-swissbox-tracker:${paxSwissboxVersion}"
    pax "org.ops4j.pax.url:pax-url-commons:${paxUrlVersion}"
    pax "org.ops4j.pax.url:pax-url-assembly:${paxUrlVersion}"
    pax "org.ops4j.pax.url:pax-url-aether:${paxUrlVersion}"
    pax "org.ops4j.base:ops4j-base-net:${ops4jVersion}"
    pax "org.apache.felix:org.osgi.service.obr:1.0.2"
    pax "org.apache.felix:org.apache.felix.bundlerepository:2.0.2"
    pax "org.ops4j.pax.url:pax-url-obr:${paxUrlVersion}"
    
    aspectj "org.aspectj:com.springsource.org.aspectj.weaver:${aspectjVersion}.RELEASE"
    
}

task setupVirgo( dependsOn: [ 'downloadVirgo', 'downloadSpring', 'downloadAspectJ', 'installPaxUrl', 'installYaas', 'upgradeSpringAndAspectJ', 'installUserRegionBundles', 'updateVirgoSettings' ] ) {}

task runVirgo(type:Exec) {
    def executableName = Os.isFamily( Os.FAMILY_WINDOWS ) ? "startup.bat" : "startup.sh"
    commandLine "${buildDir}/staging/virgo/virgo-tomcat-server-${virgoVersion}/bin/" + executableName, "-debug", "-clean", "-Djava.protocol.handler.pkgs=org.ops4j.pax.url"
}

task downloadVirgo << {
    delete new File( "${buildDir}/staging/virgo" )
    configurations.virgo.resolvedConfiguration.resolvedArtifacts.each {
        artifact -> 
           project.copy { 
               into new File( "${buildDir}/staging/virgo" ) 
               from( zipTree(artifact.file) ) 
           }
    }
}

task downloadSpring << {
    delete new File( "${buildDir}/staging/spring-upgrade" )
    configurations.spring.resolvedConfiguration.resolvedArtifacts.each {
        artifact -> 
           project.copy { 
               into new File( "${buildDir}/staging/spring-upgrade" ) 
               from( artifact.file ) 
           }
    }
}

task downloadAspectJ << {
    delete new File( "${buildDir}/staging/aspectj-upgrade" )
    configurations.aspectj.resolvedConfiguration.resolvedArtifacts.each {
        artifact -> 
           project.copy {
               into new File( "${buildDir}/staging/aspectj-upgrade" ) 
               from( artifact.file ) 
           }
    }
}

task installPaxUrl(dependsOn: [ 'downloadVirgo' ]) << {
    configurations.pax.resolvedConfiguration.resolvedArtifacts.each {
        artifact -> 
           project.copy {
               into new File( "${buildDir}/staging/virgo/virgo-tomcat-server-${virgoVersion}/repository/ext" ) 
               from( artifact.file )
           }
    }
    copy {
        from "${projectDir}/src/main/config/ext"
        into "${buildDir}/staging/virgo/virgo-tomcat-server-${virgoVersion}/repository/ext"
    }
    copy {
        from "${projectDir}/src/main/plans/pax-url.plan"
        into "${buildDir}/staging/virgo/virgo-tomcat-server-${virgoVersion}/pickup"
    }
}

task installUserRegionBundles(dependsOn: [ 'downloadVirgo' ]) << {
    configurations.compile.resolvedConfiguration.resolvedArtifacts.each {
        artifact -> 
           project.copy {
               into new File( "${buildDir}/staging/virgo/virgo-tomcat-server-${virgoVersion}/repository/usr" ) 
               from( artifact.file )
           }
    }
}

task installYaas(dependsOn: [ 'downloadVirgo' ]) << {
    copy {
        from "${projectDir}/src/main/plans/yaas.plan"
        into "${buildDir}/staging/virgo/virgo-tomcat-server-${virgoVersion}/pickup"
    }
    configurations.yaas.resolvedConfiguration.resolvedArtifacts.each {
        artifact -> 
           project.copy {
               into new File( "${buildDir}/staging/virgo/virgo-tomcat-server-${virgoVersion}/repository/usr" ) 
               from( artifact.file ) 
           }
    }
    new File( "${buildDir}/staging/virgo/virgo-tomcat-server-${virgoVersion}/repository/usr/com.yaas.properties" ).withWriter { writer ->
      getYaasConfig().toProperties().store( writer, "Yet Another Admin System Properties" )
    }
}

task updateVirgoSettings { shouldRunAfter downloadVirgo } << {
    updateProperties {
        source = "${projectDir}/src/main/config/kernel.osgi.console.properties"
        target = "${buildDir}/staging/virgo/virgo-tomcat-server-${virgoVersion}/configuration/osgi.console.properties"
    }
    updateProperties {
        source = "${projectDir}/src/main/config/user.osgi.console.properties"
        target = "${buildDir}/staging/virgo/virgo-tomcat-server-${virgoVersion}/repository/ext/osgi.console.properties"
    }
    updateProperties {
        source = "${projectDir}/src/main/config/config.ini"
        target = "${buildDir}/staging/virgo/virgo-tomcat-server-${virgoVersion}/configuration/config.ini"
    }
}

task upgradeSpringAndAspectJ(type: UpdateSpringAndAspectJTask, dependsOn: [ 'downloadSpring', 'downloadAspectJ' ]) {
    virgoHomeFolderPath = "${buildDir}/staging/virgo/virgo-tomcat-server-${virgoVersion}"
    springUpgradeFolderPath = "${buildDir}/staging/spring-upgrade"
    aspectjUpgradeFolderPath = "${buildDir}/staging/aspectj-upgrade"
    springUpgradeConfFolderPath = "${projectDir}/src/main/upgrade/spring"
    shouldRunAfter downloadVirgo
}

buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
    }
        
    dependencies {
        classpath 'commons-configuration:commons-configuration:1.10'
        classpath 'commons-lang:commons-lang:2.6'
        classpath 'commons-io:commons-io:2.4'
    }
}

// Example of different environment: gradle -Penv=test setupVirgo
def getYaasConfig() { 
    def environment = hasProperty( 'env' ) ? env : 'dev'
    println "Environment is set to $environment"
    def configFile = file( 'src/main/config/yaas-config.groovy' )
    return new ConfigSlurper( environment ).parse( configFile.toURL() )
}



import org.gradle.api.DefaultTask
import org.gradle.api.tasks.TaskAction
import org.apache.commons.configuration.Configuration;
import org.apache.commons.configuration.PropertiesConfiguration;
import org.apache.commons.lang.Validate;
import java.util.Iterator;

class UpdatePropertiesTask extends DefaultTask {
    String target;
    String source;

    @TaskAction
    def update() {
        Validate.notNull( target, "Must specify the property: target" );
        Validate.notNull( source, "Must specify the property: source" );
        PropertiesConfiguration src = new PropertiesConfiguration( source );
        PropertiesConfiguration trgt = new PropertiesConfiguration( target );
        Iterator keyIterator = src.getKeys();
		while( keyIterator.hasNext() ) {
		    String key = keyIterator.next();
		    Object value = src.getProperty( key );
		    trgt.setProperty( key, value ); 
		}
		trgt.save();
    }
}

import org.apache.commons.configuration.Configuration;
import org.apache.commons.configuration.PropertiesConfiguration;
import org.apache.commons.lang.Validate;
import org.apache.commons.io.FileUtils;
import java.util.Iterator;
import java.io.File;
import java.util.regex.Pattern;
import java.nio.file.Paths;
import java.nio.file.Path;
import java.nio.file.Files;
import java.nio.charset.Charset;
import java.nio.charset.StandardCharsets;

class UpdateSpringAndAspectJTask extends DefaultTask {
    String virgoHomeFolderPath;
	String springUpgradeFolderPath;
	String aspectjUpgradeFolderPath;
	String springUpgradeConfFolderPath;
	
	def getAspectjVersion() {
	   String result = null;
	   File aspectjUpgradeFolder = new File( aspectjUpgradeFolderPath );
	   File[] children = aspectjUpgradeFolder.listFiles();
        if( children != null ) {
            for( File child : children ) {
                String startExpression = "aspectj.weaver-";
                String endExpression = ".jar";
                String fileName = child.getName();
                if( fileName.indexOf( startExpression ) >= 0 && fileName.indexOf( endExpression ) >= 0 ) {
                    result = fileName.substring( fileName.indexOf( startExpression ) + startExpression.length(), fileName.indexOf( endExpression ) )
                    break;
                }
            }
       }
	   return result;
	}
    
    @TaskAction
    def update() {
        Validate.notNull( virgoHomeFolderPath, "Must specify the property: virgoHomeFolderPath" );
		Validate.notNull( springUpgradeFolderPath, "Must specify the property: springUpgradeFolderPath" );
		Validate.notNull( aspectjUpgradeFolderPath, "Must specify the property: aspectjUpgradeFolderPath" );
		Validate.notNull( springUpgradeConfFolderPath, "Must specify the property: springUpgradeConfFolderPath" );
		Validate.notNull( getAspectjVersion(), "Could not determine the version of AspectJ" );
		
		File virgoHomeFolder = new File( virgoHomeFolderPath );
		File springUpgradeFolder = new File( springUpgradeFolderPath );
		File aspectjUpgradeFolder = new File( aspectjUpgradeFolderPath );
		File springUpgradeConfFolder = new File( springUpgradeConfFolderPath );
		
		Validate.isTrue( virgoHomeFolder.exists(), String.format( "Virgo Home Folder: %s does not exist", virgoHomeFolderPath ) );
		Validate.isTrue( springUpgradeFolder.exists(), String.format( "Spring Upgrade Folder: %s does not exist", springUpgradeFolderPath ) );
		Validate.isTrue( aspectjUpgradeFolder.exists(), String.format( "AspectJ Upgrade Folder: %s does not exist", aspectjUpgradeFolderPath ) );
		Validate.isTrue( springUpgradeConfFolder.exists(), String.format( "Spring Upgrade Conf Folder: %s does not exist", springUpgradeConfFolderPath ) );
		
		String repositoryExtFolderPath = virgoHomeFolder.getAbsolutePath() + File.separator + "repository" + File.separator + "ext";
		File repositoryExtFolder = new File( repositoryExtFolderPath );
		Validate.isTrue( repositoryExtFolder.exists(), String.format( "Repository Ext Folder: %s does not exist", repositoryExtFolderPath ) );
		
		String pluginsFolderPath = virgoHomeFolder.getAbsolutePath() + File.separator + "plugins";
		File pluginsFolder = new File( pluginsFolderPath );
		Validate.isTrue( pluginsFolder.exists(), String.format( "Plugins Folder: %s does not exist", pluginsFolderPath ) );
		
		// Remove Existing Spring
		String oldSpringExpression = "org\\.springframework.*3.1.0.RELEASE.*";
		File[] children = repositoryExtFolder.listFiles();
		if (children != null) {
		    for( File child : children ) {
		        if( Pattern.matches( oldSpringExpression, child.getName() ) ) {
		            child.delete();
		        }
		    }
		}
		
		// Add New Spring
		File[] upgradeSpringFiles = springUpgradeFolder.listFiles();
		if( upgradeSpringFiles != null ) {
		    for( File upgradeSpringFile : upgradeSpringFiles ) {
		        FileUtils.copyFileToDirectory( upgradeSpringFile, repositoryExtFolder );
		    }
		}
		File[] upgradeSpringConfFiles = springUpgradeConfFolder.listFiles();
		if( upgradeSpringConfFiles != null ) {
		    for( File upgradeSpringConfFile : upgradeSpringConfFiles ) {
		        FileUtils.copyFileToDirectory( upgradeSpringConfFile, repositoryExtFolder );
		    }
		}
		
		// Remove Existing AspectJ
		String oldAspectJExpression = ".*aspectj.weaver.*";
		File[] children2 = repositoryExtFolder.listFiles();
		if( children2 != null ) {
		    for( File child : children2 ) {
		        if( Pattern.matches( oldAspectJExpression, child.getName() ) ) {
		            child.delete();
		        }
		    }
		}
		File[] children3 = pluginsFolder.listFiles();
		if( children3 != null ) {
		    for( File child : children3 ) {
		        if( Pattern.matches( oldAspectJExpression, child.getName() ) ) {
		            child.delete();
		        }
		    }
		}
		
		// Add New AspectJ
		File[] upgradeAspectjFiles = aspectjUpgradeFolder.listFiles();
		if( upgradeAspectjFiles != null ) {
		    for( File upgradeAspectJ : upgradeAspectjFiles ) {
		        FileUtils.copyFileToDirectory( upgradeAspectJ, repositoryExtFolder );
		        FileUtils.copyFileToDirectory( upgradeAspectJ, pluginsFolder );
		    }
		}
		Path path = Paths.get( virgoHomeFolder.getAbsolutePath() + File.separator + "configuration" + File.separator + "org.eclipse.virgo.kernel.userregion.properties" );
		Charset charset = StandardCharsets.UTF_8;
		String content = new String(Files.readAllBytes(path), charset);
		String oldLine = "org.aspectj.*;version=\"[1.6.5.RELEASE,2.0.0)\"";
		String newLine = "org.aspectj.*;version=\"[" + getAspectjVersion() + ",2.0.0)\"";
		content = content.replace( oldLine, newLine );
		Files.write(path, content.getBytes(charset));
		
		Path path2 = Paths.get( virgoHomeFolder.getAbsolutePath() + File.separator + "configuration" + File.separator + "org.eclipse.equinox.simpleconfigurator" + File.separator + "bundles.info" );
		String content2 = new String(Files.readAllBytes(path2), charset);
		String oldLine2 = "com.springsource.org.aspectj.weaver,1.6.12.RELEASE,plugins/com.springsource.org.aspectj.weaver_1.6.12.RELEASE.jar,4,false";
		String newLine2 = "com.springsource.org.aspectj.weaver," + getAspectjVersion() + ",plugins/com.springsource.org.aspectj.weaver-" + getAspectjVersion() + ".jar,4,false";
		content2 = content2.replace( oldLine2, newLine2 );
		Files.write(path2, content2.getBytes(charset));
    }
}


class UpdatePropertiesPlugin implements Plugin<Project> {
    def void apply(Project project) {
        project.convention.plugins.updateProperties = new UpdatePropertiesPluginConvention()
    }
}

class UpdatePropertiesPluginConvention {
    String target;
    String source;

    def updateProperties(Closure closure) {
        closure.delegate = this
        closure()
        
        Validate.notNull( target, "Must specify the property: target" );
        Validate.notNull( source, "Must specify the property: source" );
        PropertiesConfiguration src = new PropertiesConfiguration( source );
        PropertiesConfiguration trgt = new PropertiesConfiguration( target );
        Iterator keyIterator = src.getKeys();
        while( keyIterator.hasNext() ) {
            String key = keyIterator.next();
            Object value = src.getProperty( key );
            trgt.setProperty( key, value ); 
        }
        trgt.save();
    }
}