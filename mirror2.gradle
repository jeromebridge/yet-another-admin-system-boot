apply plugin: 'maven-publish'

group 'org.amdatu.dependencies'
version = '1.0.0'

buildscript {
    repositories {
        // mavenLocal()
        mavenCentral()
        maven { url "http://repo.pennassurancesoftware.com/artifactory/public/" }
    }
        
    dependencies {
        classpath 'edu.uci.ics:crawler4j:4.1'
    }
}

task mirror << {
	crawl( "http://repository.amdatu.org/dependencies", "tmp" );
}

publishing {
	repositories {
        maven {
        	url "http://repo.pennassurancesoftware.com/artifactory/amdatu-dependencies-mirror"
        	credentials {
		        username 'jbc'
		        password 'london10'
		    }
        }
    }
    publications {
        impl(MavenPublication) {
            groupId 'org.gradle.sample.impl'
            artifactId 'project2-impl'
            version '2.3'

            artifact "build/staging/virgo/virgo-jetty-server-3.6.3.RELEASE/repository/usr/org.amdatu.web.rest.doc-1.2.2.jar"
        }
        api(MavenPublication) {
            groupId 'org.gradle.sample'
            artifactId 'project2-api'
            version '2'

            artifact "build/staging/virgo/virgo-jetty-server-3.6.3.RELEASE/repository/usr/org.amdatu.web.rest.doc-1.2.2.jar"
        }
		fileTree( "build/staging/virgo/virgo-jetty-server-3.6.3.RELEASE/repository/usr" ).matching { include "*.jar" }.each {
			File file ->
			    def fbase = file.name.lastIndexOf('.').with {it != -1 ? file.name[0..<it] : file.name}
			    def artifactName = file.name.split("-")[0]
			    def versionNum=fbase.split("-").last()
			    def num=Math.abs(new Random().nextInt())
			    def uploadName="artifact$num"
         		println "$uploadName version: $versionNum name: $artifactName"
         		"$uploadName"(MavenPublication) {
		            groupId 'org.gradle.sample'
		            artifactId artifactName
		            version versionNum
		            artifact file
		        }
		}
    }
}

import edu.uci.ics.crawler4j.crawler.CrawlConfig;
import edu.uci.ics.crawler4j.fetcher.PageFetcher;
import edu.uci.ics.crawler4j.robotstxt.RobotstxtConfig;
import edu.uci.ics.crawler4j.robotstxt.RobotstxtServer;
import edu.uci.ics.crawler4j.crawler.CrawlController;
def crawl( url, dest ) {

	def numberOfCrawlers = 7;
    def config = new CrawlConfig();
    config.setCrawlStorageFolder(dest);

    /*
     * Instantiate the controller for this crawl.
     */
    PageFetcher pageFetcher = new PageFetcher(config);
    RobotstxtConfig robotstxtConfig = new RobotstxtConfig();
    RobotstxtServer robotstxtServer = new RobotstxtServer(robotstxtConfig, pageFetcher);
    CrawlController controller = new CrawlController(config, pageFetcher, robotstxtServer);

    /*
     * For each crawl, you need to add some seed urls. These are the first
     * URLs that are fetched and then the crawler starts following links
     * which are found in these pages
     */
    controller.addSeed( url );
    // controller.addSeed("http://www.ics.uci.edu/~welling/");
    // controller.addSeed("http://www.ics.uci.edu/");

    /*
     * Start the crawl. This is a blocking operation, meaning that your code
     * will reach the line after this only when crawling is finished.
     */
    def num = Math.abs(new Random().nextInt())
    def className = "Crawler$num"
    // def classLoader = new GroovyClassLoader(  buildscript.classLoader )
    def classLoader = new GroovyClassLoader();
    def crawlerClass = classLoader.parseClass( "public class $className extends MyCrawler{ public $className(){super( \"$url\" ); } }" )  
    
    controller.start( crawlerClass, numberOfCrawlers );

}


import edu.uci.ics.crawler4j.crawler.WebCrawler;
import edu.uci.ics.crawler4j.crawler.Page;
import java.util.regex.Pattern;
import edu.uci.ics.crawler4j.url.WebURL;
import edu.uci.ics.crawler4j.parser.HtmlParseData;
import edu.uci.ics.crawler4j.crawler.CrawlController;

public class MyCrawler extends WebCrawler {
    private final static Pattern FILTERS = Pattern.compile('.*(\\.(css|js|gif|jpg|png|mp3|mp3|zip|gz|jar))$');
	
	private final String baseUrl;
	
	public MyCrawler( String baseUrl ) {
		this.baseUrl = baseUrl;
	}

    /**
     * This method receives two parameters. The first parameter is the page
     * in which we have discovered this new url and the second parameter is
     * the new url. You should implement this function to specify whether
     * the given url should be crawled or not (based on your crawling logic).
     * In this example, we are instructing the crawler to ignore urls that
     * have css, js, git, ... extensions and to only accept urls that start
     * with base URL. In this case, we didn't need the
     * referringPage parameter to make the decision.
     */
     @Override
     public boolean shouldVisit(Page referringPage, WebURL url) {
         String href = url.getURL().toLowerCase();
         return !FILTERS.matcher(href).matches() && href.startsWith( baseUrl );
     }

     /**
      * This function is called when a page is fetched and ready
      * to be processed by your program.
      */
     @Override
     public void visit(Page page) {
         String url = page.getWebURL().getURL();
         System.out.println("URL: " + url);

         if (page.getParseData() instanceof HtmlParseData) {
             HtmlParseData htmlParseData = (HtmlParseData) page.getParseData();
             String text = htmlParseData.getText();
             String html = htmlParseData.getHtml();
             Set<WebURL> links = htmlParseData.getOutgoingUrls();

             System.out.println("Text length: " + text.length());
             System.out.println("Html length: " + html.length());
             System.out.println("Number of outgoing links: " + links.size());
         }
    }
}